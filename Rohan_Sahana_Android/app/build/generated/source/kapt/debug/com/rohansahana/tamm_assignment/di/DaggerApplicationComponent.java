// Generated by Dagger (https://dagger.dev).
package com.rohansahana.tamm_assignment.di;

import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.rohansahana.tamm_assignment.MainActivity;
import com.rohansahana.tamm_assignment.MainActivity_MembersInjector;
import com.rohansahana.tamm_assignment.db.UniversityDB;
import com.rohansahana.tamm_assignment.repository.UniversityRepository;
import com.rohansahana.tamm_assignment.retrofit.UniversityAPI;
import com.rohansahana.tamm_assignment.viewmodels.MainViewModel;
import com.rohansahana.tamm_assignment.viewmodels.MainViewModelFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import dagger.internal.Provider;
import java.util.Collections;
import java.util.Map;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class DaggerApplicationComponent {
  private DaggerApplicationComponent() {
  }

  public static ApplicationComponent.Factory factory() {
    return new Factory();
  }

  private static final class Factory implements ApplicationComponent.Factory {
    @Override
    public ApplicationComponent create(Context context) {
      Preconditions.checkNotNull(context);
      return new ApplicationComponentImpl(new NetworkModule(), new DatabaseModule(), context);
    }
  }

  private static final class ApplicationComponentImpl implements ApplicationComponent {
    private final ApplicationComponentImpl applicationComponentImpl = this;

    private Provider<Retrofit> providesRetrofitProvider;

    private Provider<UniversityAPI> providesUniversityAPIProvider;

    private Provider<Context> contextProvider;

    private Provider<UniversityDB> provideUniversityDBProvider;

    private ApplicationComponentImpl(NetworkModule networkModuleParam,
        DatabaseModule databaseModuleParam, Context contextParam) {

      initialize(networkModuleParam, databaseModuleParam, contextParam);

    }

    private MainViewModelFactory mainViewModelFactory() {
      return new MainViewModelFactory(getMap());
    }

    private UniversityRepository universityRepository() {
      return new UniversityRepository(providesUniversityAPIProvider.get(), provideUniversityDBProvider.get());
    }

    private MainViewModel mainViewModel() {
      return new MainViewModel(universityRepository());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final NetworkModule networkModuleParam,
        final DatabaseModule databaseModuleParam, final Context contextParam) {
      this.providesRetrofitProvider = DoubleCheck.provider(NetworkModule_ProvidesRetrofitFactory.create(networkModuleParam));
      this.providesUniversityAPIProvider = DoubleCheck.provider(NetworkModule_ProvidesUniversityAPIFactory.create(networkModuleParam, providesRetrofitProvider));
      this.contextProvider = InstanceFactory.create(contextParam);
      this.provideUniversityDBProvider = DoubleCheck.provider(DatabaseModule_ProvideUniversityDBFactory.create(databaseModuleParam, contextProvider));
    }

    @Override
    public void inject(MainActivity mainActivity) {
      injectMainActivity(mainActivity);
    }

    @Override
    public Map<Class<?>, ViewModel> getMap() {
      return Collections.<Class<?>, ViewModel>singletonMap(MainViewModel.class, mainViewModel());
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectMainViewModelFactory(instance, mainViewModelFactory());
      return instance;
    }
  }
}
